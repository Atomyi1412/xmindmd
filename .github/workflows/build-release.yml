name: Build and Release

# 添加权限声明以解决 403 错误
permissions:
  contents: write
  actions: read
  checks: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.1.0)'
        required: true
        default: 'v1.1.0'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
            artifact_name: 'XMind ⇄ Markdown 转换器-*.dmg'
            build_command: 'npm run build:mac'
          - os: windows-latest
            platform: win
            artifact_name: 'XMind ⇄ Markdown 转换器 Setup *.exe'
            build_command: 'npm run build:win'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        timeout-minutes: 10

      - name: Build application
        run: ${{ matrix.build_command }}
        timeout-minutes: 20
        env:
          ELECTRON_MIRROR: https://npmmirror.com/mirrors/electron/
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            dist/${{ matrix.artifact_name }}
            dist/*.blockmap
            dist/*.exe
            dist/*-win.zip
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    # 为 release job 添加明确的权限
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts/

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: XMind ⇄ Markdown 转换器 ${{ steps.get_version.outputs.version }}
          body: |
            ## XMind ⇄ Markdown 转换器 ${{ steps.get_version.outputs.version }}
            
            ### 功能特性
            - 🔄 双向转换：XMind ⇄ Markdown
            - 📝 支持多种格式：.xmind、.md 文件
            - 🎨 多主题配色方案
            - 💻 跨平台支持：Windows、macOS
            
            ### 下载说明
            - **macOS 用户**：下载 `.dmg` 文件
            - **Windows 用户**：下载 `.exe` 安装包
            
            ### 安装说明
            - macOS：双击 DMG 文件，拖拽应用到 Applications 文件夹
            - Windows：运行 EXE 文件，按提示完成安装
            
            ---
            
            构建时间：${{ github.run_id }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/mac-build/*.dmg
            ./artifacts/win-build/*.exe
            ./artifacts/win-build/*-win.zip